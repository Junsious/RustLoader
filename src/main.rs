use async_process::Command;
use inquire::{Select, Text};
use std::env;
use std::fs;
use std::io::{self, Write};
use std::path::Path;
use std::process::Command as SyncCommand;

// –ü—É—Ç—å –∫ yt-dlp.exe –≤ –ø–∞–ø–∫–µ —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
const YT_DLP_FILENAME: &str = "yt-dlp.exe";
const YT_DLP_DOWNLOAD_URL: &str = "https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe";

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ yt-dlp
    if check_yt_dlp().is_err() {
        println!("‚ö† yt-dlp –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.");
        install_yt_dlp()?;
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ
    let url = Text::new("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ:").prompt()?;
    if !url.starts_with("https://www.youtube.com/watch") {
        println!("‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube.");
        return Ok(());
    }

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    let save_path = Text::new("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:").prompt()?;
    if !fs::metadata(&save_path).is_ok() {
        println!("‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∑–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
        return Ok(());
    }

    // –í—ã–±–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ
    let qualities = vec!["–õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ", "–°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ", "–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"];
    let quality = Select::new("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:", qualities).prompt()?;

    let format = match quality {
        "–õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ" => "best",
        "–°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ" => "bv*[height<=720]+ba/b",
        "–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ" => "bv*[height<=480]+ba/b",
        _ => "best",
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
    println!("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ...");
    let status = Command::new("yt-dlp")
        .arg("-f")
        .arg(format)
        .arg("-o")
        .arg(format!("{}/%(title)s.%(ext)s", save_path))
        .arg(url)
        .status()
        .await?;

    if status.success() {
        println!("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!");
    } else {
        println!("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ.");
    }

    Ok(())
}

// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ yt-dlp –≤ —Å–∏—Å—Ç–µ–º–µ
fn check_yt_dlp() -> Result<(), ()> {
    if SyncCommand::new("yt-dlp").arg("--version").output().is_ok() {
        return Ok(());
    }
    Err(())
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç yt-dlp, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
fn install_yt_dlp() -> Result<(), Box<dyn std::error::Error>> {
    let exe_path = env::current_dir()?.join(YT_DLP_FILENAME);
    let appdata_path = env::var("APPDATA").unwrap_or_else(|_| "C:\\yt-dlp".to_string());
    let target_path = Path::new(&appdata_path).join("yt-dlp.exe");

    if !target_path.exists() {
        if exe_path.exists() {
            // –ö–æ–ø–∏—Ä—É–µ–º yt-dlp.exe –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏
            println!("üìÇ –ù–∞–π–¥–µ–Ω yt-dlp.exe, –∫–æ–ø–∏—Ä—É–µ–º –≤ {}", target_path.display());
            fs::copy(&exe_path, &target_path)?;
        } else {
            // –°–∫–∞—á–∏–≤–∞–µ–º yt-dlp.exe
            println!("üåê –°–∫–∞—á–∏–≤–∞–µ–º yt-dlp.exe...");
            let response = reqwest::blocking::get(YT_DLP_DOWNLOAD_URL)?;
            let mut file = fs::File::create(&target_path)?;
            io::copy(&mut response.bytes()?.as_ref(), &mut file)?;
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –≤ PATH (–≤—Ä–µ–º–µ–Ω–Ω–æ)
    env::set_var("PATH", format!("{};{}", target_path.parent().unwrap().display(), env::var("PATH").unwrap()));

    println!("‚úÖ yt-dlp —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
    Ok(())
}
